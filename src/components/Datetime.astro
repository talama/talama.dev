---
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
// import IconCalendar from "@/assets/icons/IconCalendar.svg";
import { SITE } from "@/config";
import { _t } from "@/i18n/lang";

dayjs.extend(utc);
dayjs.extend(timezone);

export interface Props {
  class?: string;
  size?: "sm" | "lg";
  timezone: string | undefined;
  pubDatetime: string | Date;
  modDatetime: string | Date | undefined | null;
}

const {
  pubDatetime,
  modDatetime,
  size = "sm",
  class: className = "",
  timezone: postTimezone,
} = Astro.props;

/* ========== Formatted Datetime ========== */
const isModified = modDatetime && modDatetime > pubDatetime;
const latestDatetime = isModified ? modDatetime : pubDatetime;
const datetime = dayjs(latestDatetime).tz(postTimezone || SITE.timezone);

const title = _t.date.published(
  _t.date.fullFormat(dayjs(pubDatetime).tz(postTimezone || SITE.timezone))
);
---

<div class:list={["flex items-end space-x-1", className]} title={title}>
  <!-- <IconCalendar
    class:list={[
      "inline-block size-6 min-w-[1.375rem]",
      { "scale-90": size === "sm" },
    ]}
  /> -->
  <span class:list={["text-sm", { "sm:text-base": true }]}>
    <time datetime={datetime.toISOString()}>
      {
        isModified && size === "lg"
          ? _t.date.updated(_t.date.shortFormat(datetime))
          : _t.date.shortFormat(datetime)
      }
    </time>
  </span>
</div>
